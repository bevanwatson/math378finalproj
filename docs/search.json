[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Dataset\n\nThe exploratory data analysis and predictive model were built using the “palmerpenguins” dataset. The full documentation and reference for the dataset can be found here. Feature of the datset are explored on the Penguins EDA tab.\nEDA Methods\nI started with the code provided in the labs by Alex Gold in [DevOps for Data Science]((https://do4ds.com/). I augmented his EDA code with methods found in “R for Data Science”, as well as techniques taught in DATA364.\nModeling Methods\nAs with EDA, I started with the code provided in DO4DS. I build more models based on exercises from MATH378 and “An Introduction to Statistical Learning” with Applications in Python."
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "On this page, I’ll use the R library ggplot2 to visualize the dataset, as well as load it into a DuckDB database. I am interested in 3 attributes in the penguin dataset: bill length, flipper length, and bill depth. I am interest how each attribute effects the weight, and how that differs across the 3 species.\nFirst, I’ll load necessary r packages\n\n\nCode\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(dbplyr)\n\n\nLoad penguins dataset (cleaned version)\ndf &lt;- palmerpenguins::penguins\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\nNext, I’ll create a multitude of graphs to visualize the dataset. First, histograms that show the spread of the entire dataset, then some scatterplots to break down the 3 variables of interest by species."
  },
  {
    "objectID": "EDA.html#penguin-size-and-mass-by-sex-and-species",
    "href": "EDA.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "On this page, I’ll use the R library ggplot2 to visualize the dataset, as well as load it into a DuckDB database. I am interested in 3 attributes in the penguin dataset: bill length, flipper length, and bill depth. I am interest how each attribute effects the weight, and how that differs across the 3 species.\nFirst, I’ll load necessary r packages\n\n\nCode\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(dbplyr)\n\n\nLoad penguins dataset (cleaned version)\ndf &lt;- palmerpenguins::penguins\n\n\nCode\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\n\nNext, I’ll create a multitude of graphs to visualize the dataset. First, histograms that show the spread of the entire dataset, then some scatterplots to break down the 3 variables of interest by species."
  },
  {
    "objectID": "EDA.html#distribution-of-flipper-length",
    "href": "EDA.html#distribution-of-flipper-length",
    "title": "Penguins EDA",
    "section": "Distribution of Flipper Length",
    "text": "Distribution of Flipper Length\n\n\nCode\ndf %&gt;%\nggplot(aes(x = flipper_length_mm)) +\n  geom_histogram(binwidth = 3, fill = \"darkblue\", color = \"darkorange\") +\n  ggtitle(\"Distribution of Flipper Length\") +\n  xlab(\"Flipper Length (mm)\") +\n  ylab(\"Count\")"
  },
  {
    "objectID": "EDA.html#distribution-of-bill-length",
    "href": "EDA.html#distribution-of-bill-length",
    "title": "Penguins EDA",
    "section": "Distribution of Bill length",
    "text": "Distribution of Bill length\n\n\nCode\ndf %&gt;%\nggplot(aes(x = bill_length_mm)) +\n  geom_histogram(binwidth = 3, fill = \"darkblue\", color = \"darkorange\") +\n  ggtitle(\"Distribution of Flipper Length\") +\n  xlab(\"Flipper Length (mm)\") +\n  ylab(\"Count\")"
  },
  {
    "objectID": "EDA.html#distribution-of-bill-depth",
    "href": "EDA.html#distribution-of-bill-depth",
    "title": "Penguins EDA",
    "section": "Distribution of Bill Depth",
    "text": "Distribution of Bill Depth\n\n\nCode\ndf %&gt;%\nggplot(aes(x = bill_depth_mm)) +\n  geom_histogram(binwidth = 1, fill = \"darkblue\", color = \"darkorange\") +\n  ggtitle(\"Distribution of Bill Depth\") +\n  xlab(\"Flipper Length (mm)\") +\n  ylab(\"Count\")"
  },
  {
    "objectID": "EDA.html#penguin-bill-length-vs-mass-by-species",
    "href": "EDA.html#penguin-bill-length-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Bill Length vs Mass by Species",
    "text": "Penguin Bill Length vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  labs(x = \"Bill Length (mm)\", \n       y = \"Body Mass (g)\", \n       title = \"Relationship Between Bill Length and Body Mass\",)"
  },
  {
    "objectID": "EDA.html#penguin-bill-depth-vs-mass-by-species",
    "href": "EDA.html#penguin-bill-depth-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Bill Depth vs Mass by Species",
    "text": "Penguin Bill Depth vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_depth_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  labs(x = \"Bill Depth (mm)\", \n       y = \"Body Mass (g)\", \n       title = \"Relationship Between Bill Depth and Body Mass\",)\n\n\n\n\n\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  labs(x = \"Flipper Length (mm)\", \n       y = \"Body Mass (g)\", \n       title = \"Relationship Between Flipper Length and Body Mass\",)"
  },
  {
    "objectID": "EDA.html#bill-length-vs-flipper-length",
    "href": "EDA.html#bill-length-vs-flipper-length",
    "title": "Penguins EDA",
    "section": "Bill Length vs Flipper Length",
    "text": "Bill Length vs Flipper Length\n\n\nCode\ndf %&gt;%\nggplot(aes(x = bill_length_mm, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  labs(\n    title = \"Bill Length vs Flipper Length\",\n    x = \"Bill Length (mm)\",\n    y = \"Flipper Length (mm)\"\n  )"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nlibrary(reticulate)\nuse_python(\"/Users/bevanwatson/Desktop/SPRING2024/MATH378/Final_Project/venv/bin/python\", required = TRUE)\nCode\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom vetiver import VetiverModel\nfrom pins import board_folder\nfrom vetiver import vetiver_pin_write\nimport duckdb\nfrom palmerpenguins import penguins\nfrom vetiver import VetiverAPI\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.tree import plot_tree"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\ndf = penguins.load_penguins().dropna()\ndf.head(3)\n\n\n  species     island  bill_length_mm  ...  body_mass_g     sex  year\n0  Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1  Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2  Adelie  Torgersen            40.3  ...       3250.0  female  2007\n\n[3 rows x 8 columns]\n\n\n\n\nCode\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 333 entries, 0 to 343\nData columns (total 8 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            333 non-null    object \n 1   island             333 non-null    object \n 2   bill_length_mm     333 non-null    float64\n 3   bill_depth_mm      333 non-null    float64\n 4   flipper_length_mm  333 non-null    float64\n 5   body_mass_g        333 non-null    float64\n 6   sex                333 non-null    object \n 7   year               333 non-null    int64  \ndtypes: float64(4), int64(1), object(3)\nmemory usage: 23.4+ KB"
  },
  {
    "objectID": "model.html#define-linear-model-and-fit",
    "href": "model.html#define-linear-model-and-fit",
    "title": "Model",
    "section": "Define Linear Model and Fit",
    "text": "Define Linear Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm','species', 'sex']], drop_first = True)\ny = df['body_mass_g']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=28)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX1 = get_dummies(df[['bill_length_mm', 'flipper_length_mm', 'species', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.2, random_state=28)\nmodel1 = LinearRegression()\nmodel1.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX2 = get_dummies(df[['bill_length_mm', 'bill_depth_mm', 'species', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X2, y, test_size=0.2, random_state=28)\nmodel2 = LinearRegression()\nmodel2.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX3 = get_dummies(df[['bill_depth_mm', 'flipper_length_mm', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X3, y, test_size=0.2, random_state=28)\nmodel3 = LinearRegression()\nmodel3.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX4 = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X4, y, test_size=0.2, random_state=28)\nmodel4 = LinearRegression()\nmodel4.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX5 = get_dummies(df[['bill_depth_mm', 'species', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X5, y, test_size=0.2, random_state=28)\nmodel5 = LinearRegression()\nmodel5.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\nCode\nX6 = get_dummies(df[['bill_depth_mm', 'species', 'sex']], drop_first = True)\nX_train, X_test, y_train, y_test = train_test_split(X6, y, test_size=0.2, random_state=28)\nmodel6 = LinearRegression()\nmodel6.fit(X_train, y_train)\n\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  LinearRegression?Documentation for LinearRegressioniFittedLinearRegression() \n\n\n\n\nCode\nXtree = df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm']]\nytree = df['species']\n\n# test_train split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=28)\n\ntree_model = DecisionTreeClassifier(random_state=28)\ntree_model.fit(X_train, y_train)\n\n\nDecisionTreeClassifier(random_state=28)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.  DecisionTreeClassifier?Documentation for DecisionTreeClassifieriFittedDecisionTreeClassifier(random_state=28) \n\n\nCode\n##CHATGPT WROTE THIS\nplot_tree(tree_model)\nplt.show()"
  },
  {
    "objectID": "model.html#get-some-information-from-linear-model",
    "href": "model.html#get-some-information-from-linear-model",
    "title": "Model",
    "section": "Get Some Information from Linear Model",
    "text": "Get Some Information from Linear Model\n\n\nCode\n#print(f\"R^2 {model.score(X,y)}\")\n#print(f\"Intercept {model.intercept_}\")\n#print(f\"Columns {X.columns}\")\n#print(f\"Coefficients {model.coef_}\")"
  },
  {
    "objectID": "model.html#write-initial-model-to-api",
    "href": "model.html#write-initial-model-to-api",
    "title": "Model",
    "section": "Write Initial Model to API",
    "text": "Write Initial Model to API\n\n\nCode\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\nb = board_folder('data/model', allow_pickle_read = True)\nvetiver_pin_write(b, v)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T234947Z-f5d2c\n\n\n\n\nCode\napp = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math378 Final Project: Penguins",
    "section": "",
    "text": "This Bevan Watson’s Math 378 Final Project, developed using Chapters 1-6 of Alex Golds “DevOps for Data Science.”\nSee the “About” Tab for more information about the dataset and methods used."
  }
]