---
title: "Model"
format:
  html:
    code-fold: true
---

```{r}
#| message: false
#| warning: false
library(reticulate)
use_python("/Users/bevanwatson/Desktop/SPRING2024/MATH378/Final_Project/venv/bin/python", required = TRUE)
```

```{python}
#| message: false
#| warning: false
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from vetiver import VetiverModel
from pins import board_folder
from vetiver import vetiver_pin_write
import duckdb
from palmerpenguins import penguins
from vetiver import VetiverAPI
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.impute import SimpleImputer
from sklearn.tree import plot_tree
from sklearn.metrics import mean_squared_error, r2_score
```

## Get Data

```{python}
#| message: false
#| warning: false
df = penguins.load_penguins().dropna()
df.head(3)
```

```{python}
df.info()
```

## Define Linear Model and Fit

```{python}
#| message: false
#| warning: false
X = get_dummies(df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm','species', 'sex']], drop_first = True)
y = df['body_mass_g']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=28)
model = LinearRegression()
model.fit(X_train, y_train)

X1 = get_dummies(df[['bill_length_mm', 'flipper_length_mm', 'species', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.2, random_state=28)
model1 = LinearRegression()
model1.fit(X_train, y_train)

X2 = get_dummies(df[['bill_length_mm', 'bill_depth_mm', 'species', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X2, y, test_size=0.2, random_state=28)
model2 = LinearRegression()
model2.fit(X_train, y_train)

X3 = get_dummies(df[['bill_depth_mm', 'flipper_length_mm', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X3, y, test_size=0.2, random_state=28)
model3 = LinearRegression()
model3.fit(X_train, y_train)

X4 = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X4, y, test_size=0.2, random_state=28)
model4 = LinearRegression()
model4.fit(X_train, y_train)

X5 = get_dummies(df[['bill_depth_mm', 'species', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X5, y, test_size=0.2, random_state=28)
model5 = LinearRegression()
model5.fit(X_train, y_train)

X6 = get_dummies(df[['bill_depth_mm', 'species', 'sex']], drop_first = True)
X_train, X_test, y_train, y_test = train_test_split(X6, y, test_size=0.2, random_state=28)
model6 = LinearRegression()
model6.fit(X_train, y_train)
```

```{python}
#| message: false
#| warning: false
Xtree = df[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm']]
ytree = df['species']

# test_train split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=28)

tree_model = DecisionTreeClassifier(random_state=28)
tree_model.fit(X_train, y_train)

##CHATGPT WROTE THIS
plot_tree(tree_model)
plt.show()
```

## Comparing Models:

```{python}
#| message: false
#| warning: false
##Note to grader: HATGPT WROTE THIS
def fit_and_evaluate(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=28)
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    return {
        'r2_score': r2_score(y_test, y_pred),
        'mse': mean_squared_error(y_test, y_pred),
        'intercept': model.intercept_,
        'coefficients': model.coef_,
        'columns': X.columns
    }

# Feature sets for different models
features = [
    ['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'species', 'sex'],
    ['bill_length_mm', 'flipper_length_mm', 'species', 'sex'],
    ['bill_length_mm', 'bill_depth_mm', 'species', 'sex'],
    ['bill_depth_mm', 'flipper_length_mm', 'sex'],
    ['bill_length_mm', 'species', 'sex'],
    ['bill_depth_mm', 'species', 'sex'],
    ['bill_depth_mm', 'species', 'sex']  # Note this is duplicated
]

# Dictionary to store results
results = {}

# Evaluate each model based on its feature set
for i, feature_set in enumerate(features):
    X = get_dummies(df[feature_set], drop_first=True)
    y = df['body_mass_g']
    results[f'Model_{i+1}'] = fit_and_evaluate(X, y)

# Print results for each model
for model_name, stats in results.items():
    print(f"{model_name} Results:")
    print(f"R^2 Score: {stats['r2_score']}")
    print(f"MSE: {stats['mse']}")
    print(f"Intercept: {stats['intercept']}")
    print("Coefficients:")
    for coeff, col in zip(stats['coefficients'], stats['columns']):
        print(f"  {col}: {coeff}")
    print("\n")
```

## Write Initial Model (All 5 predictor) to API

```{python}
#| message: false
#| warning: false
v = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)
b = board_folder('data/model', allow_pickle_read = True)
vetiver_pin_write(b, v)
```

```{python}
#| message: false
#| warning: false
app = VetiverAPI(v, check_prototype = True)
```

```{python}
#| message: false
#| warning: false
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
```
